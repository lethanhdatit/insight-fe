name: Deploy Insight FE

on:
  push:
    branches:
      - production

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v2

      - name: Set up Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common

          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Build Docker image
        run: |
          docker-compose -f docker-compose.yml build

      - name: Generate deploy directory name
        id: vars
        run: echo "DEPLOY_DIR=~/deploy-insight-fe-$(date +%s)" >> $GITHUB_ENV

      - name: Save Docker image as tar file
        run: |
          sudo docker save insight-fe:latest -o $GITHUB_WORKSPACE/insight-fe.tar
          
          # Change ownership to runner and then modify permissions
          sudo chown runner:runner $GITHUB_WORKSPACE/insight-fe.tar
          chmod 777 $GITHUB_WORKSPACE/insight-fe.tar
          
          # Verify permissions
          ls -l $GITHUB_WORKSPACE/insight-fe.tar

      - name: Verify tar file content
        run: |
          if [ ! -f $GITHUB_WORKSPACE/insight-fe.tar ] || [ ! -s $GITHUB_WORKSPACE/insight-fe.tar ]; then
            echo "Tar file does not exist or is empty!"
            exit 1
          fi
          echo "Tar file is valid."

      - name: Copy files to Azure VM
        uses: appleboy/scp-action@v0.1.6
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USER }}
          password: ${{ secrets.AZURE_VM_PASSWORD }}
          source: "$GITHUB_WORKSPACE/insight-fe.tar"
          target: ${{ env.DEPLOY_DIR }}

      - name: Deploy on Azure VM via SSH
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.AZURE_VM_IP }}
          username: ${{ secrets.AZURE_VM_USER }}
          password: ${{ secrets.AZURE_VM_PASSWORD }}
          script: |
            cd ${{ env.DEPLOY_DIR }}
            export TIMESTAMP=$(date +%s)

            # üîç Find current port (6500/6501/6502...) from upstream file
            CURRENT_PORT=$(grep -oP 'http://127.0.0.1:\K[0-9]+' /etc/nginx/upstreams/insight-fe-upstream.conf || echo "6500")
            echo "Current port in use: $CURRENT_PORT"

            # üîÑ Choose new port
            if [ "$CURRENT_PORT" -eq "6500" ]; then
              NEW_PORT=6501
            else
              NEW_PORT=6500
            fi
            echo "Using new port: $NEW_PORT"

            echo "Checking for containers using port $NEW_PORT..."
            containers_using_port=$(sudo docker ps -a --filter "publish=$NEW_PORT" --format "{{.ID}}")

            if [ -n "$containers_using_port" ]; then
                echo "Stopping and removing containers using port $NEW_PORT..."
                echo "$containers_using_port" | xargs -r sudo docker stop
                echo "$containers_using_port" | xargs -r sudo docker rm
            else
                echo "No containers are using port $NEW_PORT."
            fi

            # üõ† Load Docker image from tar file and run it
            echo "Loading Docker image..."
            sudo docker load -i $GITHUB_WORKSPACE/insight-fe.tar

            # üõ† Run container on the new port
            export INSIGHT_FE_PORT=$NEW_PORT
            sudo INSIGHT_FE_PORT=$NEW_PORT docker-compose up -d

            # ü©∫ Health check
            timeout=30
            until curl -s http://localhost:$NEW_PORT > /dev/null || [ $timeout -le 0 ]; do
              echo "Waiting for app to respond on port $NEW_PORT..."
              sleep 1
              timeout=$((timeout - 1))
            done

            if ! curl -s http://localhost:$NEW_PORT > /dev/null; then
              echo "Deployment failed: app not responding on port $NEW_PORT"
              sudo docker-compose logs
              sudo docker-compose down
              exit 1
            fi

            echo "‚úÖ App is healthy on port $NEW_PORT"

            # üîÅ Update NGINX ups
